package persist

// Code generated by "weaver generate". DO NOT EDIT.
import (
	"context"
	"github.com/ServiceWeaver/weaver/runtime/codegen"
	"github.com/berquerant/weaver-pokemon-type/domain"
	"go.opentelemetry.io/otel/codes"
	"go.opentelemetry.io/otel/trace"
	"reflect"
	"time"
)

func init() {
	codegen.Register(codegen.Registration{
		Name:     "github.com/berquerant/weaver-pokemon-type/persist/EffectivityDatabase",
		Iface:    reflect.TypeOf((*EffectivityDatabase)(nil)).Elem(),
		New:      func() any { return &effectivityDatabase{} },
		ConfigFn: func(i any) any { return i.(*effectivityDatabase).WithConfig.Config() },
		LocalStubFn: func(impl any, tracer trace.Tracer) any {
			return effectivityDatabase_local_stub{impl: impl.(EffectivityDatabase), tracer: tracer}
		},
		ClientStubFn: func(stub codegen.Stub, caller string) any {
			return effectivityDatabase_client_stub{stub: stub, getEffectivityByAttackMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/berquerant/weaver-pokemon-type/persist/EffectivityDatabase", Method: "GetEffectivityByAttack"}), getEffectivityByDefenseMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/berquerant/weaver-pokemon-type/persist/EffectivityDatabase", Method: "GetEffectivityByDefense"})}
		},
		ServerStubFn: func(impl any, addLoad func(uint64, float64)) codegen.Server {
			return effectivityDatabase_server_stub{impl: impl.(EffectivityDatabase), addLoad: addLoad}
		},
	})
	codegen.Register(codegen.Registration{
		Name:     "github.com/berquerant/weaver-pokemon-type/persist/TypeDatabase",
		Iface:    reflect.TypeOf((*TypeDatabase)(nil)).Elem(),
		New:      func() any { return &typeDatabase{} },
		ConfigFn: func(i any) any { return i.(*typeDatabase).WithConfig.Config() },
		LocalStubFn: func(impl any, tracer trace.Tracer) any {
			return typeDatabase_local_stub{impl: impl.(TypeDatabase), tracer: tracer}
		},
		ClientStubFn: func(stub codegen.Stub, caller string) any {
			return typeDatabase_client_stub{stub: stub, getTypeByNameMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/berquerant/weaver-pokemon-type/persist/TypeDatabase", Method: "GetTypeByName"})}
		},
		ServerStubFn: func(impl any, addLoad func(uint64, float64)) codegen.Server {
			return typeDatabase_server_stub{impl: impl.(TypeDatabase), addLoad: addLoad}
		},
	})
}

// Local stub implementations.

type effectivityDatabase_local_stub struct {
	impl   EffectivityDatabase
	tracer trace.Tracer
}

func (s effectivityDatabase_local_stub) GetEffectivityByAttack(ctx context.Context, a0 int) (r0 []*domain.Effectivity, err error) {
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "persist.EffectivityDatabase.GetEffectivityByAttack", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.GetEffectivityByAttack(ctx, a0)
}

func (s effectivityDatabase_local_stub) GetEffectivityByDefense(ctx context.Context, a0 int) (r0 []*domain.Effectivity, err error) {
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "persist.EffectivityDatabase.GetEffectivityByDefense", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.GetEffectivityByDefense(ctx, a0)
}

type typeDatabase_local_stub struct {
	impl   TypeDatabase
	tracer trace.Tracer
}

func (s typeDatabase_local_stub) GetTypeByName(ctx context.Context, a0 string) (r0 *domain.Type, err error) {
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "persist.TypeDatabase.GetTypeByName", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.GetTypeByName(ctx, a0)
}

// Client stub implementations.

type effectivityDatabase_client_stub struct {
	stub                           codegen.Stub
	getEffectivityByAttackMetrics  *codegen.MethodMetrics
	getEffectivityByDefenseMetrics *codegen.MethodMetrics
}

func (s effectivityDatabase_client_stub) GetEffectivityByAttack(ctx context.Context, a0 int) (r0 []*domain.Effectivity, err error) {
	// Update metrics.
	start := time.Now()
	s.getEffectivityByAttackMetrics.Count.Add(1)

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "persist.EffectivityDatabase.GetEffectivityByAttack", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
		err = s.stub.WrapError(err)

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
			s.getEffectivityByAttackMetrics.ErrorCount.Add(1)
		}
		span.End()

		s.getEffectivityByAttackMetrics.Latency.Put(float64(time.Since(start).Microseconds()))
	}()

	// Preallocate a buffer of the right size.
	size := 0
	size += 8
	enc := codegen.NewEncoder()
	enc.Reset(size)

	// Encode arguments.
	enc.Int(a0)
	var shardKey uint64

	// Call the remote method.
	s.getEffectivityByAttackMetrics.BytesRequest.Put(float64(len(enc.Data())))
	var results []byte
	results, err = s.stub.Run(ctx, 0, enc.Data(), shardKey)
	if err != nil {
		return
	}
	s.getEffectivityByAttackMetrics.BytesReply.Put(float64(len(results)))

	// Decode the results.
	dec := codegen.NewDecoder(results)
	r0 = serviceweaver_dec_slice_ptr_Effectivity_ed8963a2(dec)
	err = dec.Error()
	return
}

func (s effectivityDatabase_client_stub) GetEffectivityByDefense(ctx context.Context, a0 int) (r0 []*domain.Effectivity, err error) {
	// Update metrics.
	start := time.Now()
	s.getEffectivityByDefenseMetrics.Count.Add(1)

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "persist.EffectivityDatabase.GetEffectivityByDefense", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
		err = s.stub.WrapError(err)

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
			s.getEffectivityByDefenseMetrics.ErrorCount.Add(1)
		}
		span.End()

		s.getEffectivityByDefenseMetrics.Latency.Put(float64(time.Since(start).Microseconds()))
	}()

	// Preallocate a buffer of the right size.
	size := 0
	size += 8
	enc := codegen.NewEncoder()
	enc.Reset(size)

	// Encode arguments.
	enc.Int(a0)
	var shardKey uint64

	// Call the remote method.
	s.getEffectivityByDefenseMetrics.BytesRequest.Put(float64(len(enc.Data())))
	var results []byte
	results, err = s.stub.Run(ctx, 1, enc.Data(), shardKey)
	if err != nil {
		return
	}
	s.getEffectivityByDefenseMetrics.BytesReply.Put(float64(len(results)))

	// Decode the results.
	dec := codegen.NewDecoder(results)
	r0 = serviceweaver_dec_slice_ptr_Effectivity_ed8963a2(dec)
	err = dec.Error()
	return
}

type typeDatabase_client_stub struct {
	stub                 codegen.Stub
	getTypeByNameMetrics *codegen.MethodMetrics
}

func (s typeDatabase_client_stub) GetTypeByName(ctx context.Context, a0 string) (r0 *domain.Type, err error) {
	// Update metrics.
	start := time.Now()
	s.getTypeByNameMetrics.Count.Add(1)

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "persist.TypeDatabase.GetTypeByName", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
		err = s.stub.WrapError(err)

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
			s.getTypeByNameMetrics.ErrorCount.Add(1)
		}
		span.End()

		s.getTypeByNameMetrics.Latency.Put(float64(time.Since(start).Microseconds()))
	}()

	// Preallocate a buffer of the right size.
	size := 0
	size += (4 + len(a0))
	enc := codegen.NewEncoder()
	enc.Reset(size)

	// Encode arguments.
	enc.String(a0)
	var shardKey uint64

	// Call the remote method.
	s.getTypeByNameMetrics.BytesRequest.Put(float64(len(enc.Data())))
	var results []byte
	results, err = s.stub.Run(ctx, 0, enc.Data(), shardKey)
	if err != nil {
		return
	}
	s.getTypeByNameMetrics.BytesReply.Put(float64(len(results)))

	// Decode the results.
	dec := codegen.NewDecoder(results)
	r0 = serviceweaver_dec_ptr_Type_fb676a6d(dec)
	err = dec.Error()
	return
}

// Server stub implementations.

type effectivityDatabase_server_stub struct {
	impl    EffectivityDatabase
	addLoad func(key uint64, load float64)
}

// GetStubFn implements the stub.Server interface.
func (s effectivityDatabase_server_stub) GetStubFn(method string) func(ctx context.Context, args []byte) ([]byte, error) {
	switch method {
	case "GetEffectivityByAttack":
		return s.getEffectivityByAttack
	case "GetEffectivityByDefense":
		return s.getEffectivityByDefense
	default:
		return nil
	}
}

func (s effectivityDatabase_server_stub) getEffectivityByAttack(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 int
	a0 = dec.Int()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	r0, appErr := s.impl.GetEffectivityByAttack(ctx, a0)

	// Encode the results.
	enc := codegen.NewEncoder()
	serviceweaver_enc_slice_ptr_Effectivity_ed8963a2(enc, r0)
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s effectivityDatabase_server_stub) getEffectivityByDefense(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 int
	a0 = dec.Int()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	r0, appErr := s.impl.GetEffectivityByDefense(ctx, a0)

	// Encode the results.
	enc := codegen.NewEncoder()
	serviceweaver_enc_slice_ptr_Effectivity_ed8963a2(enc, r0)
	enc.Error(appErr)
	return enc.Data(), nil
}

type typeDatabase_server_stub struct {
	impl    TypeDatabase
	addLoad func(key uint64, load float64)
}

// GetStubFn implements the stub.Server interface.
func (s typeDatabase_server_stub) GetStubFn(method string) func(ctx context.Context, args []byte) ([]byte, error) {
	switch method {
	case "GetTypeByName":
		return s.getTypeByName
	default:
		return nil
	}
}

func (s typeDatabase_server_stub) getTypeByName(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 string
	a0 = dec.String()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	r0, appErr := s.impl.GetTypeByName(ctx, a0)

	// Encode the results.
	enc := codegen.NewEncoder()
	serviceweaver_enc_ptr_Type_fb676a6d(enc, r0)
	enc.Error(appErr)
	return enc.Data(), nil
}

// Encoding/decoding implementations.

func serviceweaver_enc_ptr_Effectivity_998ee108(enc *codegen.Encoder, arg *domain.Effectivity) {
	if arg == nil {
		enc.Bool(false)
	} else {
		enc.Bool(true)
		(*arg).WeaverMarshal(enc)
	}
}

func serviceweaver_dec_ptr_Effectivity_998ee108(dec *codegen.Decoder) *domain.Effectivity {
	if !dec.Bool() {
		return nil
	}
	var res domain.Effectivity
	(&res).WeaverUnmarshal(dec)
	return &res
}

func serviceweaver_enc_slice_ptr_Effectivity_ed8963a2(enc *codegen.Encoder, arg []*domain.Effectivity) {
	if arg == nil {
		enc.Len(-1)
		return
	}
	enc.Len(len(arg))
	for i := 0; i < len(arg); i++ {
		serviceweaver_enc_ptr_Effectivity_998ee108(enc, arg[i])
	}
}

func serviceweaver_dec_slice_ptr_Effectivity_ed8963a2(dec *codegen.Decoder) []*domain.Effectivity {
	n := dec.Len()
	if n == -1 {
		return nil
	}
	res := make([]*domain.Effectivity, n)
	for i := 0; i < n; i++ {
		res[i] = serviceweaver_dec_ptr_Effectivity_998ee108(dec)
	}
	return res
}

func serviceweaver_enc_ptr_Type_fb676a6d(enc *codegen.Encoder, arg *domain.Type) {
	if arg == nil {
		enc.Bool(false)
	} else {
		enc.Bool(true)
		(*arg).WeaverMarshal(enc)
	}
}

func serviceweaver_dec_ptr_Type_fb676a6d(dec *codegen.Decoder) *domain.Type {
	if !dec.Bool() {
		return nil
	}
	var res domain.Type
	(&res).WeaverUnmarshal(dec)
	return &res
}
