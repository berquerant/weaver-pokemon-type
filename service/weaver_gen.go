package service

// Code generated by "weaver generate". DO NOT EDIT.
import (
	"context"
	"fmt"
	"github.com/ServiceWeaver/weaver/runtime/codegen"
	"github.com/berquerant/weaver-pokemon-type/app"
	"go.opentelemetry.io/otel/codes"
	"go.opentelemetry.io/otel/trace"
	"reflect"
	"time"
)

func init() {
	codegen.Register(codegen.Registration{
		Name:        "github.com/berquerant/weaver-pokemon-type/service/API",
		Iface:       reflect.TypeOf((*API)(nil)).Elem(),
		New:         func() any { return &api{} },
		LocalStubFn: func(impl any, tracer trace.Tracer) any { return aPI_local_stub{impl: impl.(API), tracer: tracer} },
		ClientStubFn: func(stub codegen.Stub, caller string) any {
			return aPI_client_stub{stub: stub, getTypeByNameMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/berquerant/weaver-pokemon-type/service/API", Method: "GetTypeByName"}), getEffectivityListByAttackMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/berquerant/weaver-pokemon-type/service/API", Method: "GetEffectivityListByAttack"}), getEffectivityListByDefenseListMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/berquerant/weaver-pokemon-type/service/API", Method: "GetEffectivityListByDefenseList"})}
		},
		ServerStubFn: func(impl any, addLoad func(uint64, float64)) codegen.Server {
			return aPI_server_stub{impl: impl.(API), addLoad: addLoad}
		},
	})
}

// Local stub implementations.

type aPI_local_stub struct {
	impl   API
	tracer trace.Tracer
}

func (s aPI_local_stub) GetTypeByName(ctx context.Context, a0 *GetTypeByNameRequest) (r0 *GetTypeByNameResponse, err error) {
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "service.API.GetTypeByName", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.GetTypeByName(ctx, a0)
}

func (s aPI_local_stub) GetEffectivityListByAttack(ctx context.Context, a0 *GetEffectivityListByAttackRequest) (r0 *GetEffectivityListByAttackResponse, err error) {
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "service.API.GetEffectivityListByAttack", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.GetEffectivityListByAttack(ctx, a0)
}

func (s aPI_local_stub) GetEffectivityListByDefenseList(ctx context.Context, a0 *GetEffectivityListByDefenseListRequest) (r0 *GetEffectivityListByDefenseListResponse, err error) {
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "service.API.GetEffectivityListByDefenseList", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.GetEffectivityListByDefenseList(ctx, a0)
}

// Client stub implementations.

type aPI_client_stub struct {
	stub                                   codegen.Stub
	getTypeByNameMetrics                   *codegen.MethodMetrics
	getEffectivityListByAttackMetrics      *codegen.MethodMetrics
	getEffectivityListByDefenseListMetrics *codegen.MethodMetrics
}

func (s aPI_client_stub) GetTypeByName(ctx context.Context, a0 *GetTypeByNameRequest) (r0 *GetTypeByNameResponse, err error) {
	// Update metrics.
	start := time.Now()
	s.getTypeByNameMetrics.Count.Add(1)

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "service.API.GetTypeByName", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
		err = s.stub.WrapError(err)

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
			s.getTypeByNameMetrics.ErrorCount.Add(1)
		}
		span.End()

		s.getTypeByNameMetrics.Latency.Put(float64(time.Since(start).Microseconds()))
	}()

	// Preallocate a buffer of the right size.
	size := 0
	size += serviceweaver_size_ptr_GetTypeByNameRequest_e9a34efa(a0)
	enc := codegen.NewEncoder()
	enc.Reset(size)

	// Encode arguments.
	serviceweaver_enc_ptr_GetTypeByNameRequest_e9a34efa(enc, a0)
	var shardKey uint64

	// Call the remote method.
	s.getTypeByNameMetrics.BytesRequest.Put(float64(len(enc.Data())))
	var results []byte
	results, err = s.stub.Run(ctx, 2, enc.Data(), shardKey)
	if err != nil {
		return
	}
	s.getTypeByNameMetrics.BytesReply.Put(float64(len(results)))

	// Decode the results.
	dec := codegen.NewDecoder(results)
	r0 = serviceweaver_dec_ptr_GetTypeByNameResponse_3eade679(dec)
	err = dec.Error()
	return
}

func (s aPI_client_stub) GetEffectivityListByAttack(ctx context.Context, a0 *GetEffectivityListByAttackRequest) (r0 *GetEffectivityListByAttackResponse, err error) {
	// Update metrics.
	start := time.Now()
	s.getEffectivityListByAttackMetrics.Count.Add(1)

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "service.API.GetEffectivityListByAttack", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
		err = s.stub.WrapError(err)

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
			s.getEffectivityListByAttackMetrics.ErrorCount.Add(1)
		}
		span.End()

		s.getEffectivityListByAttackMetrics.Latency.Put(float64(time.Since(start).Microseconds()))
	}()

	// Encode arguments.
	enc := codegen.NewEncoder()
	serviceweaver_enc_ptr_GetEffectivityListByAttackRequest_e51fe8db(enc, a0)
	var shardKey uint64

	// Call the remote method.
	s.getEffectivityListByAttackMetrics.BytesRequest.Put(float64(len(enc.Data())))
	var results []byte
	results, err = s.stub.Run(ctx, 0, enc.Data(), shardKey)
	if err != nil {
		return
	}
	s.getEffectivityListByAttackMetrics.BytesReply.Put(float64(len(results)))

	// Decode the results.
	dec := codegen.NewDecoder(results)
	r0 = serviceweaver_dec_ptr_GetEffectivityListByAttackResponse_5252691c(dec)
	err = dec.Error()
	return
}

func (s aPI_client_stub) GetEffectivityListByDefenseList(ctx context.Context, a0 *GetEffectivityListByDefenseListRequest) (r0 *GetEffectivityListByDefenseListResponse, err error) {
	// Update metrics.
	start := time.Now()
	s.getEffectivityListByDefenseListMetrics.Count.Add(1)

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "service.API.GetEffectivityListByDefenseList", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
		err = s.stub.WrapError(err)

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
			s.getEffectivityListByDefenseListMetrics.ErrorCount.Add(1)
		}
		span.End()

		s.getEffectivityListByDefenseListMetrics.Latency.Put(float64(time.Since(start).Microseconds()))
	}()

	// Encode arguments.
	enc := codegen.NewEncoder()
	serviceweaver_enc_ptr_GetEffectivityListByDefenseListRequest_1cb1bf3a(enc, a0)
	var shardKey uint64

	// Call the remote method.
	s.getEffectivityListByDefenseListMetrics.BytesRequest.Put(float64(len(enc.Data())))
	var results []byte
	results, err = s.stub.Run(ctx, 1, enc.Data(), shardKey)
	if err != nil {
		return
	}
	s.getEffectivityListByDefenseListMetrics.BytesReply.Put(float64(len(results)))

	// Decode the results.
	dec := codegen.NewDecoder(results)
	r0 = serviceweaver_dec_ptr_GetEffectivityListByDefenseListResponse_fb04f746(dec)
	err = dec.Error()
	return
}

// Server stub implementations.

type aPI_server_stub struct {
	impl    API
	addLoad func(key uint64, load float64)
}

// GetStubFn implements the stub.Server interface.
func (s aPI_server_stub) GetStubFn(method string) func(ctx context.Context, args []byte) ([]byte, error) {
	switch method {
	case "GetTypeByName":
		return s.getTypeByName
	case "GetEffectivityListByAttack":
		return s.getEffectivityListByAttack
	case "GetEffectivityListByDefenseList":
		return s.getEffectivityListByDefenseList
	default:
		return nil
	}
}

func (s aPI_server_stub) getTypeByName(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 *GetTypeByNameRequest
	a0 = serviceweaver_dec_ptr_GetTypeByNameRequest_e9a34efa(dec)

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	r0, appErr := s.impl.GetTypeByName(ctx, a0)

	// Encode the results.
	enc := codegen.NewEncoder()
	serviceweaver_enc_ptr_GetTypeByNameResponse_3eade679(enc, r0)
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s aPI_server_stub) getEffectivityListByAttack(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 *GetEffectivityListByAttackRequest
	a0 = serviceweaver_dec_ptr_GetEffectivityListByAttackRequest_e51fe8db(dec)

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	r0, appErr := s.impl.GetEffectivityListByAttack(ctx, a0)

	// Encode the results.
	enc := codegen.NewEncoder()
	serviceweaver_enc_ptr_GetEffectivityListByAttackResponse_5252691c(enc, r0)
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s aPI_server_stub) getEffectivityListByDefenseList(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 *GetEffectivityListByDefenseListRequest
	a0 = serviceweaver_dec_ptr_GetEffectivityListByDefenseListRequest_1cb1bf3a(dec)

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	r0, appErr := s.impl.GetEffectivityListByDefenseList(ctx, a0)

	// Encode the results.
	enc := codegen.NewEncoder()
	serviceweaver_enc_ptr_GetEffectivityListByDefenseListResponse_fb04f746(enc, r0)
	enc.Error(appErr)
	return enc.Data(), nil
}

// AutoMarshal implementations.

var _ codegen.AutoMarshal = &GetEffectivityListByAttackRequest{}

func (x *GetEffectivityListByAttackRequest) WeaverMarshal(enc *codegen.Encoder) {
	if x == nil {
		panic(fmt.Errorf("GetEffectivityListByAttackRequest.WeaverMarshal: nil receiver"))
	}
	enc.Int(x.ID)
	enc.Int((int)(x.Index))
}

func (x *GetEffectivityListByAttackRequest) WeaverUnmarshal(dec *codegen.Decoder) {
	if x == nil {
		panic(fmt.Errorf("GetEffectivityListByAttackRequest.WeaverUnmarshal: nil receiver"))
	}
	x.ID = dec.Int()
	*(*int)(&x.Index) = dec.Int()
}

var _ codegen.AutoMarshal = &GetEffectivityListByAttackResponse{}

func (x *GetEffectivityListByAttackResponse) WeaverMarshal(enc *codegen.Encoder) {
	if x == nil {
		panic(fmt.Errorf("GetEffectivityListByAttackResponse.WeaverMarshal: nil receiver"))
	}
	serviceweaver_enc_slice_GetEffectivityListByAttackResponseItem_cdbe21be(enc, x.Items)
}

func (x *GetEffectivityListByAttackResponse) WeaverUnmarshal(dec *codegen.Decoder) {
	if x == nil {
		panic(fmt.Errorf("GetEffectivityListByAttackResponse.WeaverUnmarshal: nil receiver"))
	}
	x.Items = serviceweaver_dec_slice_GetEffectivityListByAttackResponseItem_cdbe21be(dec)
}

func serviceweaver_enc_slice_GetEffectivityListByAttackResponseItem_cdbe21be(enc *codegen.Encoder, arg []GetEffectivityListByAttackResponseItem) {
	if arg == nil {
		enc.Len(-1)
		return
	}
	enc.Len(len(arg))
	for i := 0; i < len(arg); i++ {
		(arg[i]).WeaverMarshal(enc)
	}
}

func serviceweaver_dec_slice_GetEffectivityListByAttackResponseItem_cdbe21be(dec *codegen.Decoder) []GetEffectivityListByAttackResponseItem {
	n := dec.Len()
	if n == -1 {
		return nil
	}
	res := make([]GetEffectivityListByAttackResponseItem, n)
	for i := 0; i < n; i++ {
		(&res[i]).WeaverUnmarshal(dec)
	}
	return res
}

var _ codegen.AutoMarshal = &GetEffectivityListByAttackResponseItem{}

func (x *GetEffectivityListByAttackResponseItem) WeaverMarshal(enc *codegen.Encoder) {
	if x == nil {
		panic(fmt.Errorf("GetEffectivityListByAttackResponseItem.WeaverMarshal: nil receiver"))
	}
	serviceweaver_enc_slice_Effectivity_12530f17(enc, ([]app.Effectivity)(x.Pile))
	enc.Float32(x.Multiplier)
}

func (x *GetEffectivityListByAttackResponseItem) WeaverUnmarshal(dec *codegen.Decoder) {
	if x == nil {
		panic(fmt.Errorf("GetEffectivityListByAttackResponseItem.WeaverUnmarshal: nil receiver"))
	}
	*(*[]app.Effectivity)(&x.Pile) = serviceweaver_dec_slice_Effectivity_12530f17(dec)
	x.Multiplier = dec.Float32()
}

func serviceweaver_enc_slice_Effectivity_12530f17(enc *codegen.Encoder, arg []app.Effectivity) {
	if arg == nil {
		enc.Len(-1)
		return
	}
	enc.Len(len(arg))
	for i := 0; i < len(arg); i++ {
		(arg[i]).WeaverMarshal(enc)
	}
}

func serviceweaver_dec_slice_Effectivity_12530f17(dec *codegen.Decoder) []app.Effectivity {
	n := dec.Len()
	if n == -1 {
		return nil
	}
	res := make([]app.Effectivity, n)
	for i := 0; i < n; i++ {
		(&res[i]).WeaverUnmarshal(dec)
	}
	return res
}

var _ codegen.AutoMarshal = &GetEffectivityListByDefenseListRequest{}

func (x *GetEffectivityListByDefenseListRequest) WeaverMarshal(enc *codegen.Encoder) {
	if x == nil {
		panic(fmt.Errorf("GetEffectivityListByDefenseListRequest.WeaverMarshal: nil receiver"))
	}
	serviceweaver_enc_slice_int_7c8c8866(enc, ([]int)(x.DefenseTypeIDs))
}

func (x *GetEffectivityListByDefenseListRequest) WeaverUnmarshal(dec *codegen.Decoder) {
	if x == nil {
		panic(fmt.Errorf("GetEffectivityListByDefenseListRequest.WeaverUnmarshal: nil receiver"))
	}
	*(*[]int)(&x.DefenseTypeIDs) = serviceweaver_dec_slice_int_7c8c8866(dec)
}

func serviceweaver_enc_slice_int_7c8c8866(enc *codegen.Encoder, arg []int) {
	if arg == nil {
		enc.Len(-1)
		return
	}
	enc.Len(len(arg))
	for i := 0; i < len(arg); i++ {
		enc.Int(arg[i])
	}
}

func serviceweaver_dec_slice_int_7c8c8866(dec *codegen.Decoder) []int {
	n := dec.Len()
	if n == -1 {
		return nil
	}
	res := make([]int, n)
	for i := 0; i < n; i++ {
		res[i] = dec.Int()
	}
	return res
}

var _ codegen.AutoMarshal = &GetEffectivityListByDefenseListResponse{}

func (x *GetEffectivityListByDefenseListResponse) WeaverMarshal(enc *codegen.Encoder) {
	if x == nil {
		panic(fmt.Errorf("GetEffectivityListByDefenseListResponse.WeaverMarshal: nil receiver"))
	}
	serviceweaver_enc_slice_GetEffectivityListByDefenseListResponseItem_9554c318(enc, x.Items)
}

func (x *GetEffectivityListByDefenseListResponse) WeaverUnmarshal(dec *codegen.Decoder) {
	if x == nil {
		panic(fmt.Errorf("GetEffectivityListByDefenseListResponse.WeaverUnmarshal: nil receiver"))
	}
	x.Items = serviceweaver_dec_slice_GetEffectivityListByDefenseListResponseItem_9554c318(dec)
}

func serviceweaver_enc_slice_GetEffectivityListByDefenseListResponseItem_9554c318(enc *codegen.Encoder, arg []GetEffectivityListByDefenseListResponseItem) {
	if arg == nil {
		enc.Len(-1)
		return
	}
	enc.Len(len(arg))
	for i := 0; i < len(arg); i++ {
		(arg[i]).WeaverMarshal(enc)
	}
}

func serviceweaver_dec_slice_GetEffectivityListByDefenseListResponseItem_9554c318(dec *codegen.Decoder) []GetEffectivityListByDefenseListResponseItem {
	n := dec.Len()
	if n == -1 {
		return nil
	}
	res := make([]GetEffectivityListByDefenseListResponseItem, n)
	for i := 0; i < n; i++ {
		(&res[i]).WeaverUnmarshal(dec)
	}
	return res
}

var _ codegen.AutoMarshal = &GetEffectivityListByDefenseListResponseItem{}

func (x *GetEffectivityListByDefenseListResponseItem) WeaverMarshal(enc *codegen.Encoder) {
	if x == nil {
		panic(fmt.Errorf("GetEffectivityListByDefenseListResponseItem.WeaverMarshal: nil receiver"))
	}
	serviceweaver_enc_slice_Effectivity_12530f17(enc, ([]app.Effectivity)(x.Pile))
	enc.Float32(x.Multiplier)
}

func (x *GetEffectivityListByDefenseListResponseItem) WeaverUnmarshal(dec *codegen.Decoder) {
	if x == nil {
		panic(fmt.Errorf("GetEffectivityListByDefenseListResponseItem.WeaverUnmarshal: nil receiver"))
	}
	*(*[]app.Effectivity)(&x.Pile) = serviceweaver_dec_slice_Effectivity_12530f17(dec)
	x.Multiplier = dec.Float32()
}

var _ codegen.AutoMarshal = &GetTypeByNameRequest{}

func (x *GetTypeByNameRequest) WeaverMarshal(enc *codegen.Encoder) {
	if x == nil {
		panic(fmt.Errorf("GetTypeByNameRequest.WeaverMarshal: nil receiver"))
	}
	enc.String(x.Name)
}

func (x *GetTypeByNameRequest) WeaverUnmarshal(dec *codegen.Decoder) {
	if x == nil {
		panic(fmt.Errorf("GetTypeByNameRequest.WeaverUnmarshal: nil receiver"))
	}
	x.Name = dec.String()
}

var _ codegen.AutoMarshal = &GetTypeByNameResponse{}

func (x *GetTypeByNameResponse) WeaverMarshal(enc *codegen.Encoder) {
	if x == nil {
		panic(fmt.Errorf("GetTypeByNameResponse.WeaverMarshal: nil receiver"))
	}
	serviceweaver_enc_ptr_Type_298d5b80(enc, x.Item)
}

func (x *GetTypeByNameResponse) WeaverUnmarshal(dec *codegen.Decoder) {
	if x == nil {
		panic(fmt.Errorf("GetTypeByNameResponse.WeaverUnmarshal: nil receiver"))
	}
	x.Item = serviceweaver_dec_ptr_Type_298d5b80(dec)
}

func serviceweaver_enc_ptr_Type_298d5b80(enc *codegen.Encoder, arg *app.Type) {
	if arg == nil {
		enc.Bool(false)
	} else {
		enc.Bool(true)
		(*arg).WeaverMarshal(enc)
	}
}

func serviceweaver_dec_ptr_Type_298d5b80(dec *codegen.Decoder) *app.Type {
	if !dec.Bool() {
		return nil
	}
	var res app.Type
	(&res).WeaverUnmarshal(dec)
	return &res
}

// Encoding/decoding implementations.

func serviceweaver_enc_ptr_GetEffectivityListByAttackRequest_e51fe8db(enc *codegen.Encoder, arg *GetEffectivityListByAttackRequest) {
	if arg == nil {
		enc.Bool(false)
	} else {
		enc.Bool(true)
		(*arg).WeaverMarshal(enc)
	}
}

func serviceweaver_dec_ptr_GetEffectivityListByAttackRequest_e51fe8db(dec *codegen.Decoder) *GetEffectivityListByAttackRequest {
	if !dec.Bool() {
		return nil
	}
	var res GetEffectivityListByAttackRequest
	(&res).WeaverUnmarshal(dec)
	return &res
}

func serviceweaver_enc_ptr_GetEffectivityListByAttackResponse_5252691c(enc *codegen.Encoder, arg *GetEffectivityListByAttackResponse) {
	if arg == nil {
		enc.Bool(false)
	} else {
		enc.Bool(true)
		(*arg).WeaverMarshal(enc)
	}
}

func serviceweaver_dec_ptr_GetEffectivityListByAttackResponse_5252691c(dec *codegen.Decoder) *GetEffectivityListByAttackResponse {
	if !dec.Bool() {
		return nil
	}
	var res GetEffectivityListByAttackResponse
	(&res).WeaverUnmarshal(dec)
	return &res
}

func serviceweaver_enc_ptr_GetEffectivityListByDefenseListRequest_1cb1bf3a(enc *codegen.Encoder, arg *GetEffectivityListByDefenseListRequest) {
	if arg == nil {
		enc.Bool(false)
	} else {
		enc.Bool(true)
		(*arg).WeaverMarshal(enc)
	}
}

func serviceweaver_dec_ptr_GetEffectivityListByDefenseListRequest_1cb1bf3a(dec *codegen.Decoder) *GetEffectivityListByDefenseListRequest {
	if !dec.Bool() {
		return nil
	}
	var res GetEffectivityListByDefenseListRequest
	(&res).WeaverUnmarshal(dec)
	return &res
}

func serviceweaver_enc_ptr_GetEffectivityListByDefenseListResponse_fb04f746(enc *codegen.Encoder, arg *GetEffectivityListByDefenseListResponse) {
	if arg == nil {
		enc.Bool(false)
	} else {
		enc.Bool(true)
		(*arg).WeaverMarshal(enc)
	}
}

func serviceweaver_dec_ptr_GetEffectivityListByDefenseListResponse_fb04f746(dec *codegen.Decoder) *GetEffectivityListByDefenseListResponse {
	if !dec.Bool() {
		return nil
	}
	var res GetEffectivityListByDefenseListResponse
	(&res).WeaverUnmarshal(dec)
	return &res
}

func serviceweaver_enc_ptr_GetTypeByNameRequest_e9a34efa(enc *codegen.Encoder, arg *GetTypeByNameRequest) {
	if arg == nil {
		enc.Bool(false)
	} else {
		enc.Bool(true)
		(*arg).WeaverMarshal(enc)
	}
}

func serviceweaver_dec_ptr_GetTypeByNameRequest_e9a34efa(dec *codegen.Decoder) *GetTypeByNameRequest {
	if !dec.Bool() {
		return nil
	}
	var res GetTypeByNameRequest
	(&res).WeaverUnmarshal(dec)
	return &res
}

func serviceweaver_enc_ptr_GetTypeByNameResponse_3eade679(enc *codegen.Encoder, arg *GetTypeByNameResponse) {
	if arg == nil {
		enc.Bool(false)
	} else {
		enc.Bool(true)
		(*arg).WeaverMarshal(enc)
	}
}

func serviceweaver_dec_ptr_GetTypeByNameResponse_3eade679(dec *codegen.Decoder) *GetTypeByNameResponse {
	if !dec.Bool() {
		return nil
	}
	var res GetTypeByNameResponse
	(&res).WeaverUnmarshal(dec)
	return &res
}

// Size implementations.

// serviceweaver_size_ptr_GetTypeByNameRequest_e9a34efa returns the size (in bytes) of the serialization
// of the provided type.
func serviceweaver_size_ptr_GetTypeByNameRequest_e9a34efa(x *GetTypeByNameRequest) int {
	if x == nil {
		return 1
	} else {
		return 1 + serviceweaver_size_GetTypeByNameRequest_3d82ed58(&*x)
	}
}

// serviceweaver_size_GetTypeByNameRequest_3d82ed58 returns the size (in bytes) of the serialization
// of the provided type.
func serviceweaver_size_GetTypeByNameRequest_3d82ed58(x *GetTypeByNameRequest) int {
	size := 0
	size += 0
	size += (4 + len(x.Name))
	return size
}
