// Code generated by "goconfig -configOption Option -option -output error_config_generated.go -field StatusCode StatusCode|Message string"; DO NOT EDIT.

package errorx

type ConfigItem[T any] struct {
	modified     bool
	value        T
	defaultValue T
}

func (s *ConfigItem[T]) Set(value T) {
	s.modified = true
	s.value = value
}
func (s *ConfigItem[T]) Get() T {
	if s.modified {
		return s.value
	}
	return s.defaultValue
}
func (s *ConfigItem[T]) Default() T {
	return s.defaultValue
}
func (s *ConfigItem[T]) IsModified() bool {
	return s.modified
}
func NewConfigItem[T any](defaultValue T) *ConfigItem[T] {
	return &ConfigItem[T]{
		defaultValue: defaultValue,
	}
}

type Config struct {
	StatusCode *ConfigItem[StatusCode]
	Message    *ConfigItem[string]
}
type ConfigBuilder struct {
	statusCode StatusCode
	message    string
}

func (s *ConfigBuilder) StatusCode(v StatusCode) *ConfigBuilder {
	s.statusCode = v
	return s
}
func (s *ConfigBuilder) Message(v string) *ConfigBuilder {
	s.message = v
	return s
}
func (s *ConfigBuilder) Build() *Config {
	return &Config{
		StatusCode: NewConfigItem(s.statusCode),
		Message:    NewConfigItem(s.message),
	}
}

func NewConfigBuilder() *ConfigBuilder { return &ConfigBuilder{} }
func (s *Config) Apply(opt ...Option) {
	for _, x := range opt {
		x(s)
	}
}

type Option func(*Config)

func WithStatusCode(v StatusCode) Option {
	return func(c *Config) {
		c.StatusCode.Set(v)
	}
}
func WithMessage(v string) Option {
	return func(c *Config) {
		c.Message.Set(v)
	}
}
